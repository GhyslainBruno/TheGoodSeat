{"version":3,"sources":["actions/snackBarActions.ts","constants/actionTypes/snackBarActionTypes.ts","components/SignIn.tsx","actions/authenticationActions.ts","constants/actionTypes/authenticationActionTypes.ts","constants/routes.ts","components/SignUp.tsx","actions/offersActions.ts","constants/actionTypes/offersActionTypes.ts","components/Offer.tsx","components/OffersList.tsx","components/SearchOffers.tsx","components/HomePage.tsx","App.tsx","reducers/authenticationReducer.ts","reducers/snackBarReducers.ts","reducers/offersReducer.ts","reducers/index.ts","store/index.ts","serviceWorker.ts","index.tsx"],"names":["openSnackBar","message","severity","dispatch","openSnackBarAction","closeSnackBarAction","type","payload","SignIn","useState","email","setEmail","phoneNumber","setPhoneNumber","useDispatch","Paper","elevation","className","onSubmit","event","a","options","responseType","json","ky","post","result","user","history","push","userSignIn","preventDefault","TextField","label","value","onChange","target","Button","to","SignUp","firstName","setFirstName","lastName","setLastName","birthDate","setBirthDate","isPhoneNumberVerified","setIsPhoneNumberVerified","country","setCountry","userSignUp","ToggleButton","selected","searchOffersRequestedAction","searchOffersRejectedAction","searchOffersFulfilledAction","offers","Offer","props","offer","price","currency","waitingTime","toFixed","OffersList","useSelector","state","offersReducer","map","key","SearchOffers","authenticationReducer","searchLoading","startLatitude","setStartLatitude","startLongitude","setStartLongitude","endLatitude","setEndLatitude","endLongitude","setEndLongitude","get","headers","userToken","searOffers","CircularProgress","color","HomePage","Alert","variant","withRouter","userLoading","snackBar","open","AppBar","position","Toolbar","Typography","style","flex","exact","path","render","Snackbar","autoHideDuration","onClose","initialState","error","offersInitialState","combineReducers","action","Object","assign","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","Boolean","location","hostname","match","createBrowserHistory","console","log","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e34068b8.chunk.js","sourcesContent":["import { CLOSE_SNACK_BAR, OPEN_SNACK_BAR } from \"../constants/actionTypes/snackBarActionTypes\";\n\nexport const closeSnackBar = () => {\n    return (dispatch: any) => {\n        dispatch(closeSnackBarAction());\n    }\n}\n\nexport const openSnackBar = (message: string, severity: string) => {\n    return (dispatch: any) => {\n        dispatch(openSnackBarAction(message, severity));\n    }\n}\n\n/**\n * Action creators\n */\n\nconst closeSnackBarAction = () => {\n    return {\n        type: CLOSE_SNACK_BAR\n    }\n}\nconst openSnackBarAction = (message: string, severity: string) => {\n    return {\n        type: OPEN_SNACK_BAR,\n        payload: {\n            message: message,\n            severity: severity\n        }\n    }\n}\n","export const CLOSE_SNACK_BAR = \"CLOSE_SNACK_BAR\";\nexport const OPEN_SNACK_BAR = \"OPEN_SNACK_BAR\";\n","import React, {useState} from \"react\";\nimport {Button, TextField, Paper} from \"@material-ui/core\";\nimport {useDispatch} from \"react-redux\";\nimport {userSignIn} from \"../actions/authenticationActions\";\nimport {Link} from \"react-router-dom\";\nimport {SIGN_UP} from \"../constants/routes\";\n\nexport const SignIn = () => {\n\n    const [email, setEmail] = useState('test@gmail.com');\n    const [phoneNumber, setPhoneNumber] = useState('+33667182298');\n\n    const dispatch = useDispatch();\n\n    const onSubmit = (event: any) => {\n        dispatch(userSignIn(email, phoneNumber));\n        event.preventDefault();\n    }\n\n    return (\n        <Paper elevation={1} className=\"signInCard\">\n            <form onSubmit={onSubmit}>\n\n                <div>\n                    <TextField\n                        label={'email'}\n                        type=\"email\"\n                        value={email}\n                        onChange={event => setEmail(event.target.value)}\n                    />\n                </div>\n\n                <div>\n                    <TextField\n                        label={'Phone Number'}\n                        type=\"string\"\n                        value={phoneNumber}\n                        onChange={event => setPhoneNumber(event.target.value)}\n                    />\n                </div>\n\n                <Button type=\"submit\">Sign In</Button>\n                <div>\n                    <Link to={SIGN_UP}>Don't have an account ? Sign Up</Link>\n                </div>\n            </form>\n        </Paper>\n    )\n}\n","import {\n    USER_SIGNIN_FULFILLED,\n    USER_SIGNIN_REJECTED,\n    USER_SIGNIN_REQUESTED,\n    USER_SIGNUP_FULFILLED,\n    USER_SIGNUP_REJECTED,\n    USER_SIGNUP_REQUESTED\n} from \"../constants/actionTypes/authenticationActionTypes\";\nimport ky from 'ky';\nimport {openSnackBar} from \"./snackBarActions\";\nimport {history} from '../index';\n\ninterface AuthenticationApiReturnObject {\n    code: number,\n    message: string,\n    user: object\n}\n\n//TODO : find the good type for dispatch\nexport const userSignUp = (email: string, firstName: string, lastName: string, birthDate: string, phoneNumber: string, isPhoneNumberVerified: boolean, country: string) => {\n    return async (dispatch: any) => {\n        try {\n            dispatch(userSignUpRequestedAction());\n\n            const options = {\n                responseType: 'json',\n                json: {\n                    'email': email,\n                    'firstName': firstName,\n                    'lastName': lastName,\n                    'birthDate': birthDate,\n                    'phoneNumber': phoneNumber,\n                    'isPhoneNumberVerified': isPhoneNumberVerified,\n                    'country': country\n                }\n            };\n\n            const result = await ky.post('/signup', options).json() as AuthenticationApiReturnObject\n\n            if (result.user) {\n                dispatch(openSnackBar('User signed up', 'success'))\n                dispatch(userSignUpFulfilledAction());\n                history.push('/signin');\n            }\n        } catch(error) {\n            //TODO: weird to do such a thing...\n            dispatch(openSnackBar('Error during sign up', 'error'))\n            dispatch(userSignUpRejectedAction('Error during sign up'))\n        }\n    }\n}\n\nexport const userSignIn = (email: string, phoneNumber: string) => {\n    return async (dispatch: any) => {\n\n        try {\n            dispatch(userSignInRequestedAction());\n\n            const options = {\n                responseType: 'json',\n                json: {\n                    'email': email,\n                    'phoneNumber': phoneNumber,\n                }\n            };\n\n            const result = await ky.post('/signin', options).json() as AuthenticationApiReturnObject\n\n            if (result.user) {\n                dispatch(openSnackBar('User signed in', 'success'))\n                dispatch(userSignInFulfilledAction(result.user))\n                history.push('/offers');\n            }\n\n        } catch(error) {\n            //TODO: weird to do such a thing...\n            dispatch(openSnackBar('Error during sign in', 'error'))\n            dispatch(userSignInRejectedAction('Error during sign in'))\n        }\n    }\n}\n\n/**\n * Action creators\n */\n\nfunction userSignUpRequestedAction() {\n    return {\n        type: USER_SIGNUP_REQUESTED\n    };\n}\nfunction userSignUpRejectedAction(message: string) {\n    return {\n        type: USER_SIGNUP_REJECTED,\n        payload: message\n    };\n}\nfunction userSignUpFulfilledAction() {\n    return {\n        type: USER_SIGNUP_FULFILLED\n    };\n}\n\nfunction userSignInRequestedAction() {\n    return {\n        type: USER_SIGNIN_REQUESTED\n    };\n}\nfunction userSignInRejectedAction(message: string) {\n    return {\n        type: USER_SIGNIN_REJECTED,\n        payload: message\n    };\n}\n\n//TODO: should use a User class --> don't have time to do so\nfunction userSignInFulfilledAction(user: any) {\n    return {\n        type: USER_SIGNIN_FULFILLED,\n        payload: user\n    };\n}\n\n\n","export const USER_SIGNUP_REQUESTED = \"USER_SIGNUP_REQUESTED\";\nexport const USER_SIGNUP_REJECTED = \"USER_SIGNUP_REJECTED\";\nexport const USER_SIGNUP_FULFILLED = \"USER_SIGNUP_FULFILLED\";\n\nexport const USER_SIGNIN_REQUESTED = \"USER_SIGNIN_REQUESTED\";\nexport const USER_SIGNIN_REJECTED = \"USER_SIGNIN_REJECTED\";\nexport const USER_SIGNIN_FULFILLED = \"USER_SIGNIN_FULFILLED\";\n","export const SIGN_UP = '/signup';\nexport const SIGN_IN = '/signin';\nexport const LANDING = '/';\n","import React, {useState} from \"react\";\nimport {Button, Paper, TextField} from \"@material-ui/core\";\nimport {userSignUp} from \"../actions/authenticationActions\";\nimport {useDispatch} from \"react-redux\";\nimport {ToggleButton} from \"@material-ui/lab\";\n// @ts-ignore\nimport CheckIcon from '@material-ui/icons/Check';\nimport {Link} from \"react-router-dom\";\nimport {SIGN_IN} from \"../constants/routes\";\n\nexport const SignUp = () => {\n\n    const [email, setEmail] = useState('test@gmail.com');\n    const [firstName, setFirstName] = useState('Kim');\n    const [lastName, setLastName] = useState('Hernandez');\n    const [birthDate, setBirthDate] = useState('1996-05-17');\n    const [phoneNumber, setPhoneNumber] = useState('+33667182298');\n    const [isPhoneNumberVerified, setIsPhoneNumberVerified] = useState(true);\n    const [country, setCountry] = useState('France');\n\n    const dispatch = useDispatch();\n\n    const onSubmit = (event: any) => {\n        dispatch(userSignUp(email, firstName, lastName, birthDate, phoneNumber, isPhoneNumberVerified, country));\n        event.preventDefault();\n    }\n\n    return (\n\n        <Paper elevation={1} className=\"signInCard\">\n            <form onSubmit={onSubmit}>\n\n                <div>\n                    <TextField\n                        type=\"email\"\n                        label={'Email'}\n                        value={email}\n                        onChange={event => setEmail(event.target.value)}\n                    />\n                </div>\n\n                <div>\n                    <TextField\n                        type=\"string\"\n                        label={'First Name'}\n                        value={firstName}\n                        onChange={event => setFirstName(event.target.value)}\n                    />\n                </div>\n\n                <div>\n                    <TextField\n                        type=\"string\"\n                        label={'Last Name'}\n                        value={lastName}\n                        onChange={event => setLastName(event.target.value)}\n                    />\n                </div>\n\n                <div>\n                    <TextField\n                        type=\"string\"\n                        label={'Birth Date'}\n                        value={birthDate}\n                        onChange={event => setBirthDate(event.target.value)}\n                    />\n                </div>\n\n                <div>\n                    <TextField\n                        type=\"string\"\n                        label={'Phone Number'}\n                        value={phoneNumber}\n                        onChange={event => setPhoneNumber(event.target.value)}\n                    />\n                </div>\n\n                <div>\n                    Is Phone Number Verified :\n                    <ToggleButton\n                        value=\"check\"\n                        selected={isPhoneNumberVerified}\n                        onChange={() => setIsPhoneNumberVerified(!isPhoneNumberVerified)}\n                    >\n                        <CheckIcon />\n                    </ToggleButton>\n\n                </div>\n\n                <div>\n                    <TextField\n                        type=\"string\"\n                        label={'Country'}\n                        value={country}\n                        onChange={event => setCountry(event.target.value)}\n                    />\n                </div>\n\n                <Button type=\"submit\">Sign Up</Button>\n                <div>\n                    <Link to={SIGN_IN}>Already have an account ? Sign In</Link>\n                </div>\n            </form>\n        </Paper>\n    )\n}\n","import {OFFERS_SEARCH_FULFILLED, OFFERS_SEARCH_REJECTED, OFFERS_SEARCH_REQUESTED} from \"../constants/actionTypes/offersActionTypes\";\nimport ky from \"ky\";\nimport {openSnackBar} from \"./snackBarActions\";\n\ninterface OffersApiReturnObject {\n    code: number,\n    offers: [{\n        price: number,\n        currency: string,\n        waitingTime: number\n    }]\n}\n\n//TODO: isn't a good practice at all - I should store user token in sessionStorage, and this would be what would say if the user is logged in or not\n// I should very much use a User class instead of just not using Typescript in here - using any...\nexport const searOffers = (user: any, startLatitude: string, startLongitude: string, endLatitude: string, endLongitude: string) => {\n    return async (dispatch: any) => {\n        try {\n            dispatch(searchOffersRequestedAction());\n\n            const result = await ky.get(\n                `/offers?startLatitude=${startLatitude}&startLongitude=${startLongitude}&endLatitude=${endLatitude}&endLongitude=${endLongitude}`,\n                {\n                    headers: {\n                        'Authorization': `Bearer ${user.userToken}`\n                    }\n                }\n            ).json() as OffersApiReturnObject\n\n            if (result.offers) {\n                dispatch(openSnackBar('Offers search successful', 'success'))\n                dispatch(searchOffersFulfilledAction(result.offers))\n            }\n\n        } catch(error) {\n            //TODO: weird to do such a thing...\n            dispatch(openSnackBar('Error during offers search', 'error'))\n            dispatch(searchOffersRejectedAction('Error during offers search'))\n        }\n    }\n}\n\n/**\n * Action creators\n */\n\nconst searchOffersRequestedAction = () => {\n    return {\n        type: OFFERS_SEARCH_REQUESTED\n    }\n}\nconst searchOffersRejectedAction = (message: string) => {\n    return {\n        type: OFFERS_SEARCH_REJECTED\n    }\n}\n\n//TODO: should use a Offers class --> don't have time to do so\nconst searchOffersFulfilledAction = (offers: any) => {\n    return {\n        type: OFFERS_SEARCH_FULFILLED,\n        payload: offers\n    }\n}\n","export const OFFERS_SEARCH_REQUESTED = \"OFFERS_SEARCH_REQUESTED\";\nexport const OFFERS_SEARCH_REJECTED = \"OFFERS_SEARCH_REJECTED\";\nexport const OFFERS_SEARCH_FULFILLED = \"OFFERS_SEARCH_FULFILLED\";\n","import React from \"react\";\nimport {Paper} from \"@material-ui/core\";\n\nexport const Offer = (props: any) => {\n\n    return (\n\n        <Paper elevation={1} className=\"offerCard\">\n            <div>\n                Price {props.offer.price} {props.offer.currency} - Arrive in {props.offer.waitingTime ? (props.offer.waitingTime/60).toFixed(0)+ 'm ' + props.offer.waitingTime % 60 + 's' : 'less than a minute'}\n            </div>\n        </Paper>\n    )\n}\n","import React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {ReduxState} from \"../App\";\nimport {Offer} from \"./Offer\";\n\nexport const OffersList = () => {\n\n    const offers = useSelector((state: ReduxState) => state.offersReducer.offers);\n\n    return (\n        <div>\n            {\n                offers.map((offer: any) => {\n                    return <Offer offer={offer} key={offer.price}/>\n                })\n            }\n        </div>\n    )\n}\n","import React, {useState} from \"react\";\nimport {Button, CircularProgress, Paper, TextField} from \"@material-ui/core\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {ReduxState} from \"../App\";\nimport {searOffers} from \"../actions/offersActions\";\nimport {OffersList} from \"./OffersList\";\n\nexport const SearchOffers = () => {\n\n    const user = useSelector((state: ReduxState) => state.authenticationReducer.user);\n    const searchLoading = useSelector((state: ReduxState) => state.offersReducer.searchLoading);\n\n    const [startLatitude, setStartLatitude] = useState('48.870377');\n    const [startLongitude, setStartLongitude] = useState('2.370615');\n    const [endLatitude, setEndLatitude] = useState('48.882719');\n    const [endLongitude, setEndLongitude] = useState('2.322451');\n\n    const dispatch = useDispatch();\n\n    const onSubmit = (event: any) => {\n        dispatch(searOffers(user, startLatitude, startLongitude, endLatitude, endLongitude));\n        event.preventDefault();\n    }\n\n    return (\n        <div>\n            Search Offers Component\n\n            <form onSubmit={onSubmit}>\n                <Paper elevation={1} className=\"signInCard\">\n                    <div>\n                        <TextField\n                            type=\"string\"\n                            label={'Start Latitude'}\n                            value={startLatitude}\n                            onChange={event => setStartLatitude(event.target.value)}\n                        />\n\n                        <TextField\n                            type=\"string\"\n                            label={'Start Longitude'}\n                            value={startLongitude}\n                            onChange={event => setStartLongitude(event.target.value)}\n                        />\n                    </div>\n\n                    <div>\n                        <TextField\n                            type=\"string\"\n                            label={'End Latitude'}\n                            value={endLatitude}\n                            onChange={event => setEndLatitude(event.target.value)}\n                        />\n\n                        <TextField\n                            type=\"string\"\n                            label={'End Longitude'}\n                            value={endLongitude}\n                            onChange={event => setEndLongitude(event.target.value)}\n                        />\n                    </div>\n\n                    <Button type=\"submit\">Search</Button>\n                    { searchLoading ? <CircularProgress color=\"secondary\"/> : null }\n                </Paper>\n            </form>\n\n            <OffersList/>\n\n        </div>\n\n    )\n}\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {SIGN_IN, SIGN_UP} from \"../constants/routes\";\nimport {Paper} from \"@material-ui/core\";\n\nexport const HomePage = () => {\n    return (\n        <Paper elevation={1} className=\"signInCard\">\n            <div>\n                <div>Home Page - technical test for The Good Seat company</div>\n                <div>\n                    <Link to={SIGN_IN}>Sign In</Link>\n                </div>\n                <div>\n                    <Link to={SIGN_UP}>Sign Up</Link>\n                </div>\n            </div>\n        </Paper>\n    )\n}\n","import React from 'react';\nimport {Route, Redirect} from 'react-router-dom';\nimport './App.css';\nimport {CircularProgress, Snackbar, AppBar, Toolbar, Typography} from '@material-ui/core';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\nimport {closeSnackBar} from \"./actions/snackBarActions\";\nimport {SignIn} from \"./components/SignIn\";\nimport {SignUp} from \"./components/SignUp\";\nimport {SearchOffers} from \"./components/SearchOffers\";\nimport {HomePage} from \"./components/HomePage\";\nimport { withRouter } from 'react-router-dom';\n\nfunction Alert(props: AlertProps) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nexport interface ReduxState {\n    authenticationReducer: {\n        user: {\n            email: string,\n            phoneNumber: string\n        },\n        userLoading: boolean,\n        error: boolean,\n        message: string,\n        isUserSignedUp: boolean,\n        isUserSignedIn: boolean\n    },\n    offersReducer: {\n        offers: [],\n        searchLoading: boolean\n    },\n    snackBar: {\n        open: boolean,\n        message: string,\n        severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined\n    }\n}\n\nconst App = () => {\n\n    const user = useSelector((state: ReduxState) => state.authenticationReducer.user);\n    const userLoading = useSelector((state: ReduxState) => state.authenticationReducer.userLoading);\n    const openSnackBar = useSelector((state: ReduxState) => state.snackBar.open);\n    const message = useSelector((state: ReduxState) => state.snackBar.message);\n    const severity = useSelector((state: ReduxState) => state.snackBar.severity);\n\n    const dispatch = useDispatch();\n\n    return (\n\n            <main>\n\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <Typography style={{flex: '1'}} variant=\"h6\">\n                            The Good Seat\n                        </Typography>\n                        <div>\n                            { user ? user.email : null }\n                        </div>\n                        <div>\n                            { userLoading ? <CircularProgress color=\"secondary\"/> : null }\n                        </div>\n                    </Toolbar>\n                </AppBar>\n\n                {\n                    user ?\n                        <div>\n                            <Route exact path='/' render={() =><Redirect to=\"/offers\"/>}/>\n                            <Route exact path='/signin' render={() =><SignIn/>}/>\n                            <Route exact path='/signup' render={() =><SignUp/>}/>\n                            <Route exact path='/offers' render={() =><SearchOffers/>}/>\n                        </div>\n                        :\n                        <div>\n                            <Route exact path='/offers' render={() =><Redirect to=\"/signin\"/>}/>\n                            <Route exact path='/signin' render={() =><SignIn/>}/>\n                            <Route exact path='/signup' render={() =><SignUp/>}/>\n                            <Route exact path='/' render={() =><HomePage/>}/>\n                        </div>\n                }\n\n                <Snackbar\n                    autoHideDuration={3000}\n                    open={openSnackBar}\n                    onClose={() => {dispatch(closeSnackBar())}}\n                >\n                    <Alert severity={severity}>\n                        {message}\n                    </Alert>\n                </Snackbar>\n\n            </main>\n    );\n}\n\nexport default withRouter(App);\n","import {\n    USER_SIGNUP_FULFILLED,\n    USER_SIGNUP_REJECTED,\n    USER_SIGNUP_REQUESTED,\n    USER_SIGNIN_FULFILLED,\n    USER_SIGNIN_REJECTED,\n    USER_SIGNIN_REQUESTED\n} from \"../constants/actionTypes/authenticationActionTypes\";\n\nconst initialState = {\n    user: null,\n    userLoading: false,\n    error: false,\n    message: '',\n}\n\n//TODO: find the right type for action\nexport default function authenticationReducer (state = initialState, action: any) {\n\n    switch (action.type) {\n        case USER_SIGNUP_REQUESTED:\n            return Object.assign({}, state, {\n                user: 'foobar',\n                userLoading: true\n            });\n\n        case USER_SIGNUP_FULFILLED :\n            return Object.assign({}, state, {\n                userLoading: false,\n            });\n\n        case USER_SIGNUP_REJECTED:\n            return Object.assign({}, state, {\n                user: null,\n                userLoading: false,\n                error: true,\n                message: action.payload\n            });\n\n        case USER_SIGNIN_REQUESTED:\n            return Object.assign({}, state, {\n                user: null,\n                userLoading: true\n            });\n\n        case USER_SIGNIN_FULFILLED:\n            return Object.assign({}, state, {\n                user: action.payload,\n                userLoading: false\n            });\n\n        case USER_SIGNIN_REJECTED:\n            return Object.assign({}, state, {\n                user: null,\n                userLoading: false,\n                error: true,\n                message: action.payload\n            });\n\n        default:\n            return state;\n    }\n\n}\n","import {CLOSE_SNACK_BAR, OPEN_SNACK_BAR} from \"../constants/actionTypes/snackBarActionTypes\";\n\nconst initialState = {\n    open: false,\n    message: '',\n    severity: ''\n}\n\nexport default function snackBar (state = initialState, action: any) {\n    switch (action.type) {\n        case CLOSE_SNACK_BAR:\n            return Object.assign({}, state, {\n                open: false\n            });\n\n        case OPEN_SNACK_BAR:\n            return Object.assign({}, state, {\n                open: true,\n                message: action.payload.message,\n                severity: action.payload.severity\n            });\n\n        default:\n            return state;\n    }\n}\n","import {OFFERS_SEARCH_FULFILLED, OFFERS_SEARCH_REJECTED, OFFERS_SEARCH_REQUESTED} from \"../constants/actionTypes/offersActionTypes\";\n\nconst offersInitialState = {\n    offers: [],\n    searchLoading: false\n}\n\nexport default function offersReducer(state = offersInitialState, action: any) {\n    switch (action.type) {\n        case OFFERS_SEARCH_REQUESTED:\n            return Object.assign({}, state, {\n                offers: [],\n                searchLoading: true\n            });\n\n        case OFFERS_SEARCH_REJECTED:\n            return Object.assign({}, state, {\n                offers: [],\n                searchLoading: false\n            });\n\n        case OFFERS_SEARCH_FULFILLED:\n            return Object.assign({}, state, {\n                offers: action.payload,\n                searchLoading: false\n            });\n\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from 'redux'\nimport authenticationReducer from \"./authenticationReducer\";\nimport snackBar from \"./snackBarReducers\";\nimport offersReducer from \"./offersReducer\"\n\nexport default combineReducers({\n    authenticationReducer,\n    snackBar,\n    offersReducer\n})\n","import { createStore, compose, applyMiddleware } from \"redux\";\nimport thunk from 'redux-thunk';\nimport rootReducer from \"../reducers/index\";\n\n// @ts-ignore\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer,\n    composeEnhancer(applyMiddleware(thunk)),\n);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from \"react-redux\";\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\nimport {Router} from \"react-router-dom\";\n\nimport { createBrowserHistory } from \"history\";\nexport const history = createBrowserHistory();\n\nconsole.log('No need to worry about what\\'s in there, trust me ;-)');\n\n// @ts-ignore\nwindow.store = store;\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router history={history}>\n            <App />\n        </Router>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}